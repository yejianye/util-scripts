#!/usr/bin/env python
from argh import ArghParser, arg
import argparse
import yaml
import subprocess
import select
import sys
import os
import fcntl

def set_non_blocking(fd):
    fileno = fd.fileno()
    fl = fcntl.fcntl(fileno, fcntl.F_GETFL)
    fcntl.fcntl(fileno, fcntl.F_SETFL, fl | os.O_NONBLOCK)

class MultiRunner(object):
    def __init__(self, cmd_objs):
        self.processes = {}
        self.cmd_objs = cmd_objs

    def start_process(self, name, command):
        proc = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout_prefix, stderr_prefix = '%s(%s)|OUT' % (name, proc.pid) ,  '%s(%s)|ERR' % (name, proc.pid)
        self.processes[proc.stdout] = (proc, stdout_prefix)
        self.processes[proc.stderr] = (proc, stderr_prefix)
        map(set_non_blocking, [proc.stdout, proc.stderr])

    def run(self):
        for obj in self.cmd_objs:
            assert obj.has_key('command'), "'command' parameter is required for every process."
            self.start_process(self.get_name(obj), obj['command'])

        while self.processes:
            rlist, _, _ = select.select(self.processes.keys(), [], [])
            for fd in rlist:
                proc, prefix = self.processes[fd]
                content = fd.read()
                if content:
                    lines = ['[%s] %s\n' % (prefix, line) for line in content.split('\n')]
                    sys.stdout.writelines(lines)
                if proc.poll() is not None:
                    self.processes.pop(fd, None)

    def get_name(self, obj):
        return obj.get('name', os.path.basename(obj['command'].split(' ')[0]))
        
@arg('--config', '-f', default='multirun.yml', help='Configuration file that specifies the commands to be executed.(default: multirun.conf)')
def main(args):
    """
    Launch multiple processes and manage all of their outputs together.
    Example of YAML-formatted config file
    ---
    name: proc1
    command: shell-command-to-start-proc1
    ---
    name: proc2
    command: shell-command-to-start-proc2
    """
    cmd_objs = yaml.load_all(open(args.config))
    runner = MultiRunner(cmd_objs)
    try:
        runner.run()
    except KeyboardInterrupt:
        pass

if __name__ == '__main__':
    parser = ArghParser(formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.set_default_command(main)
    parser.dispatch()
